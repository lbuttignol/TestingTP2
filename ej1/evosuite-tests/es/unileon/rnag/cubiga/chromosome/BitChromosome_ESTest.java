/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 04 21:47:32 GMT 2018
 */

package es.unileon.rnag.cubiga.chromosome;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import es.unileon.rnag.cubiga.chromosome.BitChromosome;
import es.unileon.rnag.cubiga.chromosome.Chromosome;
import es.unileon.rnag.cubiga.datatypes.BitVector;
import es.unileon.rnag.cubiga.datatypes.GeneticType;
import es.unileon.rnag.cubiga.datatypes.List;
import es.unileon.rnag.cubiga.datatypes.ListVector;
import es.unileon.rnag.cubiga.datatypes.Range;
import es.unileon.rnag.cubiga.gen.BitGen;
import es.unileon.rnag.cubiga.gen.Gen;
import es.unileon.rnag.cubiga.gen.ListGen;
import es.unileon.rnag.cubiga.gen.RangeGen;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BitChromosome_ESTest extends BitChromosome_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(352, (GeneticType) null);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(352, bitChromosome0.length());
      assertNotNull(bitChromosome0);
      
      Chromosome chromosome0 = bitChromosome0.copyChromosome();
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(352, bitChromosome0.length());
      assertEquals(352, chromosome0.length());
      assertEquals(0.0, chromosome0.getFitness(), 0.01);
      assertNotNull(chromosome0);
      assertFalse(chromosome0.equals((Object)bitChromosome0));
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(chromosome0, bitChromosome0);
      
      // Undeclared exception!
      try { 
        chromosome0.setGen((Gen) null, 352);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(11, (GeneticType) null);
      assertEquals(11, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(bitChromosome0);
      
      ListGen listGen0 = new ListGen("The index passed is out of bounds", (GeneticType) null);
      assertEquals("The index passed is out of bounds", listGen0.getValue());
      assertNotNull(listGen0);
      
      Gen[] genArray0 = new Gen[4];
      genArray0[0] = (Gen) listGen0;
      genArray0[1] = (Gen) listGen0;
      genArray0[2] = (Gen) listGen0;
      Iterator<Gen> iterator0 = bitChromosome0.iterator();
      assertEquals(11, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(iterator0);
      
      Random.setNextRandom(0);
      genArray0[3] = (Gen) listGen0;
      // Undeclared exception!
      try { 
        bitChromosome0.setChromosomeSlice(genArray0, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The selected slice does not fit in the position of the chromosome
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(11, (GeneticType) null);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(11, bitChromosome0.length());
      assertNotNull(bitChromosome0);
      
      Gen[] genArray0 = new Gen[5];
      // Undeclared exception!
      try { 
        bitChromosome0.setChromosomeSlice(genArray0, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The selected slice does not fit in the position of the chromosome
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1432);
      assertNotNull(bitVector0);
      
      BitChromosome bitChromosome0 = new BitChromosome(1432, bitVector0);
      assertEquals(1432, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(bitChromosome0);
      
      Iterator<Gen> iterator0 = bitChromosome0.iterator();
      assertEquals(1432, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(iterator0);
      
      BitChromosome bitChromosome1 = new BitChromosome(bitChromosome0);
      assertEquals(1432, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(1432, bitChromosome1.length());
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertNotNull(bitChromosome1);
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      
      Gen gen0 = bitChromosome0.getGen(2);
      assertEquals(1432, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals("false", gen0.getValue());
      assertEquals("0", gen0.toString());
      assertNotNull(gen0);
      assertFalse(bitChromosome0.equals((Object)bitChromosome1));
      assertNotSame(bitChromosome0, bitChromosome1);
      
      Gen gen1 = bitVector0.generateGen(2);
      assertEquals("false", gen1.getValue());
      assertEquals("0", gen1.toString());
      assertNotNull(gen1);
      assertFalse(gen1.equals((Object)gen0));
      assertNotSame(gen1, gen0);
      
      int int0 = 81;
      int int1 = (-618);
      Chromosome chromosome0 = bitChromosome0.copyChromosome();
      assertEquals(1432, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(1432, chromosome0.length());
      assertEquals(0.0, chromosome0.getFitness(), 0.01);
      assertNotNull(chromosome0);
      assertFalse(bitChromosome0.equals((Object)bitChromosome1));
      assertFalse(chromosome0.equals((Object)bitChromosome1));
      assertFalse(chromosome0.equals((Object)bitChromosome0));
      assertNotSame(bitChromosome0, bitChromosome1);
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(chromosome0, bitChromosome1);
      assertNotSame(chromosome0, bitChromosome0);
      
      Gen gen2 = bitVector0.generateGen(81);
      assertEquals("false", gen2.getValue());
      assertEquals("0", gen2.toString());
      assertNotNull(gen2);
      assertFalse(gen2.equals((Object)gen0));
      assertFalse(gen2.equals((Object)gen1));
      assertNotSame(gen2, gen0);
      assertNotSame(gen2, gen1);
      
      int int2 = 0;
      Gen gen3 = bitVector0.generateGen(0);
      assertEquals("0", gen3.toString());
      assertEquals("false", gen3.getValue());
      assertNotNull(gen3);
      assertFalse(gen3.equals((Object)gen0));
      assertFalse(gen3.equals((Object)gen2));
      assertFalse(gen3.equals((Object)gen1));
      assertNotSame(gen3, gen0);
      assertNotSame(gen3, gen2);
      assertNotSame(gen3, gen1);
      
      Chromosome chromosome1 = bitVector0.generateChromosome();
      assertEquals(1432, chromosome1.length());
      assertEquals(0.0, chromosome1.getFitness(), 0.01);
      assertNotNull(chromosome1);
      assertFalse(chromosome1.equals((Object)bitChromosome1));
      assertFalse(chromosome1.equals((Object)chromosome0));
      assertFalse(chromosome1.equals((Object)bitChromosome0));
      assertNotSame(chromosome1, bitChromosome1);
      assertNotSame(chromosome1, chromosome0);
      assertNotSame(chromosome1, bitChromosome0);
      
      int int3 = (-1504);
      // Undeclared exception!
      try { 
        bitChromosome0.setChromosomeSlice((Gen[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GeneticType geneticType0 = null;
      BitChromosome bitChromosome0 = new BitChromosome(352, (GeneticType) null);
      assertEquals(352, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(bitChromosome0);
      
      Chromosome chromosome0 = bitChromosome0.copyChromosome();
      assertEquals(352, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(0.0, chromosome0.getFitness(), 0.01);
      assertEquals(352, chromosome0.length());
      assertNotNull(chromosome0);
      assertFalse(chromosome0.equals((Object)bitChromosome0));
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(chromosome0, bitChromosome0);
      
      // Undeclared exception!
      try { 
        chromosome0.mutateGen(352);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1432);
      assertNotNull(bitVector0);
      
      BitChromosome bitChromosome0 = new BitChromosome(1432, bitVector0);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(1432, bitChromosome0.length());
      assertNotNull(bitChromosome0);
      
      Iterator<Gen> iterator0 = bitChromosome0.iterator();
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(1432, bitChromosome0.length());
      assertNotNull(iterator0);
      
      Chromosome chromosome0 = bitVector0.generateChromosome();
      assertEquals(0.0, chromosome0.getFitness(), 0.01);
      assertEquals(1432, chromosome0.length());
      assertNotNull(chromosome0);
      assertFalse(chromosome0.equals((Object)bitChromosome0));
      assertNotSame(chromosome0, bitChromosome0);
      
      Gen gen0 = bitChromosome0.getGen(1);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(1432, bitChromosome0.length());
      assertEquals("false", gen0.getValue());
      assertEquals("0", gen0.toString());
      assertNotNull(gen0);
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertNotSame(bitChromosome0, chromosome0);
      
      Gen gen1 = bitVector0.generateGen(1);
      assertEquals("false", gen1.getValue());
      assertEquals("0", gen1.toString());
      assertNotNull(gen1);
      assertFalse(gen1.equals((Object)gen0));
      assertNotSame(gen1, gen0);
      
      Chromosome chromosome1 = bitChromosome0.copyChromosome();
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(1432, bitChromosome0.length());
      assertEquals(1432, chromosome1.length());
      assertEquals(0.0, chromosome1.getFitness(), 0.01);
      assertNotNull(chromosome1);
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertFalse(chromosome1.equals((Object)chromosome0));
      assertFalse(chromosome1.equals((Object)bitChromosome0));
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(bitChromosome0, chromosome1);
      assertNotSame(chromosome1, chromosome0);
      assertNotSame(chromosome1, bitChromosome0);
      
      bitChromosome0.setGen(gen1, 0);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(1432, bitChromosome0.length());
      assertEquals("false", gen1.getValue());
      assertEquals("0", gen1.toString());
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertFalse(bitChromosome0.equals((Object)chromosome1));
      assertFalse(gen1.equals((Object)gen0));
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(bitChromosome0, chromosome1);
      assertNotSame(gen1, gen0);
      
      Gen gen2 = bitVector0.generateGen(81);
      assertEquals("false", gen2.getValue());
      assertEquals("0", gen2.toString());
      assertNotNull(gen2);
      assertFalse(gen2.equals((Object)gen0));
      assertFalse(gen2.equals((Object)gen1));
      assertNotSame(gen2, gen0);
      assertNotSame(gen2, gen1);
      
      Gen gen3 = bitVector0.generateGen(0);
      assertEquals("false", gen3.getValue());
      assertEquals("0", gen3.toString());
      assertNotNull(gen3);
      assertFalse(gen3.equals((Object)gen0));
      assertFalse(gen3.equals((Object)gen1));
      assertFalse(gen3.equals((Object)gen2));
      assertNotSame(gen3, gen0);
      assertNotSame(gen3, gen1);
      assertNotSame(gen3, gen2);
      
      Chromosome chromosome2 = bitVector0.generateChromosome();
      assertEquals(0.0, chromosome2.getFitness(), 0.01);
      assertEquals(1432, chromosome2.length());
      assertNotNull(chromosome2);
      assertFalse(chromosome2.equals((Object)chromosome0));
      assertFalse(chromosome2.equals((Object)bitChromosome0));
      assertFalse(chromosome2.equals((Object)chromosome1));
      assertNotSame(chromosome2, chromosome0);
      assertNotSame(chromosome2, bitChromosome0);
      assertNotSame(chromosome2, chromosome1);
      
      Gen[] genArray0 = new Gen[2];
      genArray0[0] = gen0;
      genArray0[1] = gen2;
      // Undeclared exception!
      try { 
        bitChromosome0.setChromosomeSlice(genArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1432);
      assertNotNull(bitVector0);
      
      BitChromosome bitChromosome0 = new BitChromosome(1432, bitVector0);
      assertEquals(1432, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(bitChromosome0);
      
      int int0 = 1;
      Iterator<Gen> iterator0 = bitChromosome0.iterator();
      assertEquals(1432, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(iterator0);
      
      Chromosome chromosome0 = bitVector0.generateChromosome();
      assertEquals(1432, chromosome0.length());
      assertEquals(0.0, chromosome0.getFitness(), 0.01);
      assertNotNull(chromosome0);
      assertFalse(chromosome0.equals((Object)bitChromosome0));
      assertNotSame(chromosome0, bitChromosome0);
      
      Gen gen0 = bitChromosome0.getGen(1);
      assertEquals(1432, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals("false", gen0.getValue());
      assertEquals("0", gen0.toString());
      assertNotNull(gen0);
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertNotSame(bitChromosome0, chromosome0);
      
      Gen gen1 = bitVector0.generateGen(1);
      assertEquals("0", gen1.toString());
      assertEquals("false", gen1.getValue());
      assertNotNull(gen1);
      assertFalse(gen1.equals((Object)gen0));
      assertNotSame(gen1, gen0);
      
      int int1 = 81;
      int int2 = 1531;
      Chromosome chromosome1 = bitChromosome0.copyChromosome();
      assertEquals(1432, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(1432, chromosome1.length());
      assertEquals(0.0, chromosome1.getFitness(), 0.01);
      assertNotNull(chromosome1);
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertFalse(chromosome1.equals((Object)bitChromosome0));
      assertFalse(chromosome1.equals((Object)chromosome0));
      assertNotSame(bitChromosome0, chromosome1);
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(chromosome1, bitChromosome0);
      assertNotSame(chromosome1, chromosome0);
      
      Gen gen2 = bitVector0.generateGen(81);
      assertEquals("false", gen2.getValue());
      assertEquals("0", gen2.toString());
      assertNotNull(gen2);
      assertFalse(gen2.equals((Object)gen1));
      assertFalse(gen2.equals((Object)gen0));
      assertNotSame(gen2, gen1);
      assertNotSame(gen2, gen0);
      
      int int3 = 0;
      Gen gen3 = bitVector0.generateGen(0);
      assertEquals("0", gen3.toString());
      assertEquals("false", gen3.getValue());
      assertNotNull(gen3);
      assertFalse(gen3.equals((Object)gen0));
      assertFalse(gen3.equals((Object)gen1));
      assertFalse(gen3.equals((Object)gen2));
      assertNotSame(gen3, gen0);
      assertNotSame(gen3, gen1);
      assertNotSame(gen3, gen2);
      
      Chromosome chromosome2 = bitVector0.generateChromosome();
      assertEquals(1432, chromosome2.length());
      assertEquals(0.0, chromosome2.getFitness(), 0.01);
      assertNotNull(chromosome2);
      assertFalse(chromosome2.equals((Object)chromosome0));
      assertFalse(chromosome2.equals((Object)chromosome1));
      assertFalse(chromosome2.equals((Object)bitChromosome0));
      assertNotSame(chromosome2, chromosome0);
      assertNotSame(chromosome2, chromosome1);
      assertNotSame(chromosome2, bitChromosome0);
      
      int int4 = 0;
      Gen[] genArray0 = new Gen[2];
      genArray0[0] = gen0;
      genArray0[1] = gen2;
      // Undeclared exception!
      try { 
        bitChromosome0.setChromosomeSlice(genArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(352, (GeneticType) null);
      assertEquals(352, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(bitChromosome0);
      
      Chromosome chromosome0 = bitChromosome0.copyChromosome();
      assertEquals(352, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(0.0, chromosome0.getFitness(), 0.01);
      assertEquals(352, chromosome0.length());
      assertNotNull(chromosome0);
      assertFalse(chromosome0.equals((Object)bitChromosome0));
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(chromosome0, bitChromosome0);
      
      BitChromosome bitChromosome1 = new BitChromosome(bitChromosome0);
      assertEquals(352, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertEquals(352, bitChromosome1.length());
      assertNotNull(bitChromosome1);
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertFalse(bitChromosome1.equals((Object)chromosome0));
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      
      Iterator<Gen> iterator0 = bitChromosome1.iterator();
      assertEquals(352, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertEquals(352, bitChromosome1.length());
      assertNotNull(iterator0);
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertFalse(bitChromosome0.equals((Object)bitChromosome1));
      assertFalse(bitChromosome1.equals((Object)chromosome0));
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(bitChromosome0, bitChromosome1);
      assertNotSame(bitChromosome1, chromosome0);
      assertNotSame(bitChromosome1, bitChromosome0);
      
      Iterator<Gen> iterator1 = bitChromosome1.iterator();
      assertEquals(352, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertEquals(352, bitChromosome1.length());
      assertNotNull(iterator1);
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertFalse(bitChromosome0.equals((Object)bitChromosome1));
      assertFalse(bitChromosome1.equals((Object)chromosome0));
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(bitChromosome0, bitChromosome1);
      assertNotSame(bitChromosome1, chromosome0);
      assertNotSame(bitChromosome1, bitChromosome0);
      assertNotSame(iterator1, iterator0);
      
      int int0 = (-1);
      int int1 = (-3061);
      ListGen listGen0 = new ListGen((String) null, (GeneticType) null);
      assertNull(listGen0.getValue());
      assertNotNull(listGen0);
      
      // Undeclared exception!
      try { 
        bitChromosome0.setGen(listGen0, (-618));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List[] listArray0 = new List[3];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "]Y7bU";
      stringArray0[4] = "";
      List list0 = new List(stringArray0);
      assertNotNull(list0);
      assertEquals(5, stringArray0.length);
      
      listArray0[0] = list0;
      List list1 = new List(stringArray0);
      assertNotNull(list1);
      assertEquals(5, stringArray0.length);
      assertFalse(list1.equals((Object)list0));
      
      String string0 = list1.getRandomPossibility();
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertEquals("", string0);
      
      listArray0[1] = list1;
      List list2 = new List(stringArray0);
      assertNotNull(list2);
      assertEquals(5, stringArray0.length);
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      
      listArray0[2] = list2;
      ListVector listVector0 = new ListVector(listArray0);
      assertNotNull(listVector0);
      assertEquals(3, listArray0.length);
      
      String string1 = list2.getRandomPossibility();
      assertNotNull(string1);
      assertEquals(5, stringArray0.length);
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertEquals("", string1);
      
      BitChromosome bitChromosome0 = new BitChromosome(1209, listVector0);
      assertEquals(1209, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(bitChromosome0);
      assertEquals(3, listArray0.length);
      
      Chromosome chromosome0 = listVector0.generateChromosome();
      assertEquals(0.0, chromosome0.getFitness(), 0.01);
      assertEquals(3, chromosome0.length());
      assertNotNull(chromosome0);
      assertEquals(3, listArray0.length);
      
      bitChromosome0.geneticType = (GeneticType) listVector0;
      assertEquals(1209, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      
      String string2 = list1.getRandomPossibility();
      assertNotNull(string2);
      assertEquals(5, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(list1.equals((Object)list2));
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertEquals("", string2);
      
      Iterator<Gen> iterator0 = bitChromosome0.iterator();
      assertEquals(1209, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(iterator0);
      assertEquals(3, listArray0.length);
      
      Chromosome chromosome1 = bitChromosome0.copyChromosome();
      assertEquals(1209, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(0.0, chromosome1.getFitness(), 0.01);
      assertEquals(1209, chromosome1.length());
      assertNotNull(chromosome1);
      assertEquals(3, listArray0.length);
      assertFalse(chromosome1.equals((Object)bitChromosome0));
      assertNotSame(bitChromosome0, chromosome1);
      assertNotSame(chromosome1, bitChromosome0);
      
      Gen gen0 = bitChromosome0.getGen(1);
      assertEquals(1209, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals("0", gen0.toString());
      assertEquals("false", gen0.getValue());
      assertNotNull(gen0);
      assertEquals(3, listArray0.length);
      assertFalse(bitChromosome0.equals((Object)chromosome1));
      assertNotSame(bitChromosome0, chromosome1);
      
      String string3 = list2.getRandomPossibility();
      assertNotNull(string3);
      assertEquals(5, stringArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertEquals("", string3);
      
      String string4 = list2.getRandomPossibility();
      assertNotNull(string4);
      assertEquals(5, stringArray0.length);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertEquals("", string4);
      
      Gen gen1 = bitChromosome0.getGen(1);
      assertEquals(1209, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals("false", gen1.getValue());
      assertEquals("0", gen1.toString());
      assertNotNull(gen1);
      assertEquals(3, listArray0.length);
      assertFalse(bitChromosome0.equals((Object)chromosome1));
      assertFalse(gen1.equals((Object)gen0));
      assertNotSame(bitChromosome0, chromosome1);
      assertNotSame(gen1, gen0);
      
      bitChromosome0.setGen(gen0, 1);
      assertEquals(1209, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals("0", gen0.toString());
      assertEquals("false", gen0.getValue());
      assertEquals(3, listArray0.length);
      assertFalse(bitChromosome0.equals((Object)chromosome1));
      assertFalse(gen0.equals((Object)gen1));
      assertNotSame(bitChromosome0, chromosome1);
      assertNotSame(gen0, gen1);
      
      Gen[] genArray0 = bitChromosome0.getChromosomeSlice(1, 1);
      assertEquals(1209, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(genArray0);
      assertEquals(3, listArray0.length);
      assertEquals(1, genArray0.length);
      assertFalse(bitChromosome0.equals((Object)chromosome1));
      assertNotSame(bitChromosome0, chromosome1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List[] listArray0 = new List[3];
      String[] stringArray0 = new String[7];
      stringArray0[0] = " ;9F`P3cG] O\":1c(d5";
      stringArray0[1] = ")$wy";
      stringArray0[2] = "Q";
      stringArray0[3] = "~T1|giJQ9^Vt+r";
      stringArray0[4] = "The selected slice does not fit in the position of the chromosome";
      stringArray0[5] = "%ct\u0002$f SZ+3A";
      stringArray0[6] = "";
      List list0 = new List(stringArray0);
      assertNotNull(list0);
      assertEquals(7, stringArray0.length);
      
      listArray0[0] = list0;
      List list1 = new List(stringArray0);
      assertNotNull(list1);
      assertEquals(7, stringArray0.length);
      assertFalse(list1.equals((Object)list0));
      
      listArray0[1] = list1;
      List list2 = new List(stringArray0);
      assertNotNull(list2);
      assertEquals(7, stringArray0.length);
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      
      listArray0[2] = list2;
      ListVector listVector0 = new ListVector(listArray0);
      assertNotNull(listVector0);
      assertEquals(3, listArray0.length);
      
      BitChromosome bitChromosome0 = new BitChromosome(1, listVector0);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(1, bitChromosome0.length());
      assertNotNull(bitChromosome0);
      assertEquals(3, listArray0.length);
      
      String string0 = list1.getRandomPossibility();
      assertNotNull(string0);
      assertEquals(7, stringArray0.length);
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.equals((Object)list2));
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertEquals(")$wy", string0);
      
      // Undeclared exception!
      try { 
        bitChromosome0.getGen(1109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GeneticType geneticType0 = null;
      BitChromosome bitChromosome0 = new BitChromosome(352, (GeneticType) null);
      assertEquals(352, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(bitChromosome0);
      
      Chromosome chromosome0 = bitChromosome0.copyChromosome();
      assertEquals(352, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(0.0, chromosome0.getFitness(), 0.01);
      assertEquals(352, chromosome0.length());
      assertNotNull(chromosome0);
      assertFalse(chromosome0.equals((Object)bitChromosome0));
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(chromosome0, bitChromosome0);
      
      BitChromosome bitChromosome1 = new BitChromosome(bitChromosome0);
      assertEquals(352, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertEquals(352, bitChromosome1.length());
      assertNotNull(bitChromosome1);
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      assertFalse(bitChromosome1.equals((Object)chromosome0));
      
      Iterator<Gen> iterator0 = bitChromosome1.iterator();
      assertEquals(352, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertEquals(352, bitChromosome1.length());
      assertNotNull(iterator0);
      assertFalse(bitChromosome0.equals((Object)bitChromosome1));
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      assertFalse(bitChromosome1.equals((Object)chromosome0));
      assertNotSame(bitChromosome0, bitChromosome1);
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(bitChromosome1, bitChromosome0);
      assertNotSame(bitChromosome1, chromosome0);
      
      Iterator<Gen> iterator1 = bitChromosome1.iterator();
      assertEquals(352, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertEquals(352, bitChromosome1.length());
      assertNotNull(iterator1);
      assertFalse(bitChromosome0.equals((Object)bitChromosome1));
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      assertFalse(bitChromosome1.equals((Object)chromosome0));
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotSame(bitChromosome0, bitChromosome1);
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(bitChromosome1, bitChromosome0);
      assertNotSame(bitChromosome1, chromosome0);
      assertNotSame(iterator1, iterator0);
      
      int int0 = (-1);
      int int1 = (-3061);
      // Undeclared exception!
      try { 
        bitChromosome0.getGen(1402);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      List[] listArray0 = new List[5];
      String[] stringArray0 = new String[0];
      List list0 = new List(stringArray0);
      assertNotNull(list0);
      assertEquals(0, stringArray0.length);
      
      listArray0[0] = list0;
      List list1 = new List(stringArray0);
      assertNotNull(list1);
      assertEquals(0, stringArray0.length);
      assertFalse(list1.equals((Object)list0));
      
      listArray0[1] = list1;
      List list2 = new List(stringArray0);
      assertNotNull(list2);
      assertEquals(0, stringArray0.length);
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      
      listArray0[2] = list2;
      List list3 = new List(stringArray0);
      assertNotNull(list3);
      assertEquals(0, stringArray0.length);
      assertFalse(list3.equals((Object)list2));
      assertFalse(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list0));
      
      listArray0[3] = list3;
      List list4 = new List(stringArray0);
      assertNotNull(list4);
      assertEquals(0, stringArray0.length);
      assertFalse(list4.equals((Object)list3));
      assertFalse(list4.equals((Object)list2));
      assertFalse(list4.equals((Object)list1));
      assertFalse(list4.equals((Object)list0));
      
      listArray0[4] = list4;
      ListVector listVector0 = new ListVector(listArray0);
      assertNotNull(listVector0);
      assertEquals(5, listArray0.length);
      
      BitChromosome bitChromosome0 = new BitChromosome(236, listVector0);
      assertEquals(236, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(bitChromosome0);
      assertEquals(5, listArray0.length);
      
      BitChromosome bitChromosome1 = new BitChromosome(bitChromosome0);
      assertEquals(236, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertEquals(236, bitChromosome1.length());
      assertNotNull(bitChromosome1);
      assertEquals(5, listArray0.length);
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      
      // Undeclared exception!
      try { 
        bitChromosome1.getGen((-404));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 609;
      GeneticType geneticType0 = null;
      BitChromosome bitChromosome0 = new BitChromosome(609, (GeneticType) null);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(609, bitChromosome0.length());
      assertNotNull(bitChromosome0);
      
      BitChromosome bitChromosome1 = new BitChromosome(bitChromosome0);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(609, bitChromosome0.length());
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertEquals(609, bitChromosome1.length());
      assertNotNull(bitChromosome1);
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      
      bitChromosome1.setFitness(609);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(609, bitChromosome0.length());
      assertEquals(609.0, bitChromosome1.getFitness(), 0.01);
      assertEquals(609, bitChromosome1.length());
      assertFalse(bitChromosome0.equals((Object)bitChromosome1));
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      assertNotSame(bitChromosome0, bitChromosome1);
      assertNotSame(bitChromosome1, bitChromosome0);
      
      Chromosome chromosome0 = bitChromosome1.copyChromosome();
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(609, bitChromosome0.length());
      assertEquals(609.0, bitChromosome1.getFitness(), 0.01);
      assertEquals(609, bitChromosome1.length());
      assertEquals(609, chromosome0.length());
      assertEquals(609.0, chromosome0.getFitness(), 0.01);
      assertNotNull(chromosome0);
      assertFalse(bitChromosome0.equals((Object)bitChromosome1));
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      assertFalse(chromosome0.equals((Object)bitChromosome0));
      assertFalse(chromosome0.equals((Object)bitChromosome1));
      assertNotSame(bitChromosome0, bitChromosome1);
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(bitChromosome1, bitChromosome0);
      assertNotSame(bitChromosome1, chromosome0);
      assertNotSame(chromosome0, bitChromosome0);
      assertNotSame(chromosome0, bitChromosome1);
      
      Gen[] genArray0 = new Gen[2];
      Range[] rangeArray0 = new Range[9];
      int int1 = 0;
      Range range0 = null;
      try {
        range0 = new Range(1, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The range is not well defined. First index must be lower than last index
         //
         verifyException("es.unileon.rnag.cubiga.datatypes.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List[] listArray0 = new List[1];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "false";
      stringArray0[3] = "BitChromosome must have a longitude greater than 0.";
      List list0 = new List(stringArray0);
      assertNotNull(list0);
      assertEquals(4, stringArray0.length);
      
      listArray0[0] = list0;
      ListVector listVector0 = new ListVector(listArray0);
      assertNotNull(listVector0);
      assertEquals(1, listArray0.length);
      
      BitChromosome bitChromosome0 = new BitChromosome(3368, listVector0);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(3368, bitChromosome0.length());
      assertNotNull(bitChromosome0);
      assertEquals(1, listArray0.length);
      
      BitChromosome bitChromosome1 = new BitChromosome(bitChromosome0);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(3368, bitChromosome0.length());
      assertEquals(3368, bitChromosome1.length());
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertNotNull(bitChromosome1);
      assertEquals(1, listArray0.length);
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      
      Gen[] genArray0 = bitChromosome1.getChromosomeSlice(2300, 464);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(3368, bitChromosome0.length());
      assertEquals(3368, bitChromosome1.length());
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertNotNull(genArray0);
      assertEquals(1, listArray0.length);
      assertEquals(464, genArray0.length);
      assertFalse(bitChromosome0.equals((Object)bitChromosome1));
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      assertNotSame(bitChromosome0, bitChromosome1);
      assertNotSame(bitChromosome1, bitChromosome0);
      
      Gen gen0 = bitChromosome0.getGen(2300);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(3368, bitChromosome0.length());
      assertEquals("false", gen0.getValue());
      assertEquals("0", gen0.toString());
      assertNotNull(gen0);
      assertEquals(1, listArray0.length);
      assertFalse(bitChromosome0.equals((Object)bitChromosome1));
      assertNotSame(bitChromosome0, bitChromosome1);
      
      Iterator<Gen> iterator0 = bitChromosome0.iterator();
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(3368, bitChromosome0.length());
      assertNotNull(iterator0);
      assertEquals(1, listArray0.length);
      assertFalse(bitChromosome0.equals((Object)bitChromosome1));
      assertNotSame(bitChromosome0, bitChromosome1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(352, (GeneticType) null);
      assertEquals(352, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(bitChromosome0);
      
      Chromosome chromosome0 = bitChromosome0.copyChromosome();
      assertEquals(352, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(352, chromosome0.length());
      assertEquals(0.0, chromosome0.getFitness(), 0.01);
      assertNotNull(chromosome0);
      assertFalse(chromosome0.equals((Object)bitChromosome0));
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(chromosome0, bitChromosome0);
      
      BitChromosome bitChromosome1 = new BitChromosome(bitChromosome0);
      assertEquals(352, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertEquals(352, bitChromosome1.length());
      assertNotNull(bitChromosome1);
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      assertFalse(bitChromosome1.equals((Object)chromosome0));
      
      Iterator<Gen> iterator0 = bitChromosome1.iterator();
      assertEquals(352, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertEquals(352, bitChromosome1.length());
      assertNotNull(iterator0);
      assertFalse(bitChromosome0.equals((Object)bitChromosome1));
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      assertFalse(bitChromosome1.equals((Object)chromosome0));
      assertNotSame(bitChromosome0, bitChromosome1);
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(bitChromosome1, bitChromosome0);
      assertNotSame(bitChromosome1, chromosome0);
      
      // Undeclared exception!
      try { 
        bitChromosome1.mutateGen(1629);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(11, (GeneticType) null);
      assertEquals(11, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(bitChromosome0);
      
      // Undeclared exception!
      try { 
        bitChromosome0.mutateGen(321);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 3000;
      List[] listArray0 = new List[4];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "es.unileon.rnag.cubiga.chromosome.BitChromosome";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      List list0 = new List(stringArray0);
      assertNotNull(list0);
      assertEquals(4, stringArray0.length);
      
      listArray0[0] = list0;
      List list1 = new List(stringArray0);
      assertNotNull(list1);
      assertEquals(4, stringArray0.length);
      assertFalse(list1.equals((Object)list0));
      
      listArray0[1] = list1;
      List list2 = new List(stringArray0);
      assertNotNull(list2);
      assertEquals(4, stringArray0.length);
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      
      listArray0[2] = list2;
      List list3 = new List(stringArray0);
      assertNotNull(list3);
      assertEquals(4, stringArray0.length);
      assertFalse(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list2));
      assertFalse(list3.equals((Object)list0));
      
      listArray0[3] = list3;
      ListVector listVector0 = new ListVector(listArray0);
      assertNotNull(listVector0);
      assertEquals(4, listArray0.length);
      
      String string0 = list3.getRandomPossibility();
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      assertFalse(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list2));
      assertFalse(list3.equals((Object)list0));
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertNotSame(list3, list0);
      assertEquals("es.unileon.rnag.cubiga.chromosome.BitChromosome", string0);
      
      BitChromosome bitChromosome0 = new BitChromosome(3000, listVector0);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(3000, bitChromosome0.length());
      assertNotNull(bitChromosome0);
      assertEquals(4, listArray0.length);
      
      String string1 = list3.getRandomPossibility();
      assertNotNull(string1);
      assertEquals(4, stringArray0.length);
      assertFalse(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list2));
      assertFalse(list3.equals((Object)list0));
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertNotSame(list3, list0);
      assertEquals("es.unileon.rnag.cubiga.chromosome.BitChromosome", string1);
      
      // Undeclared exception!
      try { 
        bitChromosome0.getChromosomeSlice(3000, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List[] listArray0 = new List[4];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "es.unileon.rnag.cubiga.gen.BitGen";
      stringArray0[1] = "es.unileon.rnag.cubiga.datatypes.List";
      stringArray0[2] = "";
      stringArray0[3] = "v@$~|^$'FlG^nO QRnf";
      List list0 = new List(stringArray0);
      assertNotNull(list0);
      assertEquals(4, stringArray0.length);
      
      listArray0[0] = list0;
      List list1 = new List(stringArray0);
      assertNotNull(list1);
      assertEquals(4, stringArray0.length);
      assertFalse(list1.equals((Object)list0));
      
      listArray0[1] = list1;
      List list2 = new List(stringArray0);
      assertNotNull(list2);
      assertEquals(4, stringArray0.length);
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      
      listArray0[2] = list2;
      String string0 = list2.getRandomPossibility();
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertEquals("es.unileon.rnag.cubiga.gen.BitGen", string0);
      
      String string1 = list2.getRandomPossibility();
      assertNotNull(string1);
      assertEquals(4, stringArray0.length);
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertEquals("es.unileon.rnag.cubiga.gen.BitGen", string1);
      
      List list3 = new List(stringArray0);
      assertNotNull(list3);
      assertEquals(4, stringArray0.length);
      assertFalse(list3.equals((Object)list2));
      assertFalse(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list0));
      
      listArray0[3] = list3;
      String string2 = list1.getRandomPossibility();
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.equals((Object)list3));
      assertFalse(list1.equals((Object)list2));
      assertNotSame(list1, list0);
      assertNotSame(list1, list3);
      assertNotSame(list1, list2);
      assertEquals("es.unileon.rnag.cubiga.gen.BitGen", string2);
      
      ListVector listVector0 = new ListVector(listArray0);
      assertNotNull(listVector0);
      assertEquals(4, listArray0.length);
      
      BitChromosome bitChromosome0 = new BitChromosome(2020, listVector0);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(2020, bitChromosome0.length());
      assertNotNull(bitChromosome0);
      assertEquals(4, listArray0.length);
      
      String string3 = list3.getRandomPossibility();
      assertNotNull(string3);
      assertEquals(4, stringArray0.length);
      assertFalse(list3.equals((Object)list2));
      assertFalse(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list0));
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertEquals("es.unileon.rnag.cubiga.gen.BitGen", string3);
      
      Gen[] genArray0 = new Gen[0];
      bitChromosome0.setChromosomeSlice(genArray0, 1);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(2020, bitChromosome0.length());
      assertEquals(4, listArray0.length);
      assertEquals(0, genArray0.length);
      
      int int0 = bitChromosome0.length();
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(2020, bitChromosome0.length());
      assertEquals(4, listArray0.length);
      assertEquals(2020, int0);
      
      Chromosome chromosome0 = bitChromosome0.copyChromosome();
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(2020, bitChromosome0.length());
      assertEquals(2020, chromosome0.length());
      assertEquals(0.0, chromosome0.getFitness(), 0.01);
      assertNotNull(chromosome0);
      assertEquals(4, listArray0.length);
      assertFalse(chromosome0.equals((Object)bitChromosome0));
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(chromosome0, bitChromosome0);
      
      int int1 = bitChromosome0.length();
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(2020, bitChromosome0.length());
      assertEquals(4, listArray0.length);
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertTrue(int1 == int0);
      assertNotSame(bitChromosome0, chromosome0);
      assertEquals(2020, int1);
      
      Gen[] genArray1 = bitChromosome0.getChromosomeSlice(1, 0);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(2020, bitChromosome0.length());
      assertNotNull(genArray1);
      assertEquals(4, listArray0.length);
      assertEquals(0, genArray1.length);
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertFalse(genArray1.equals((Object)genArray0));
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(genArray1, genArray0);
      
      Chromosome chromosome1 = bitChromosome0.copyChromosome();
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(2020, bitChromosome0.length());
      assertEquals(2020, chromosome1.length());
      assertEquals(0.0, chromosome1.getFitness(), 0.01);
      assertNotNull(chromosome1);
      assertEquals(4, listArray0.length);
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertFalse(chromosome1.equals((Object)bitChromosome0));
      assertFalse(chromosome1.equals((Object)chromosome0));
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(bitChromosome0, chromosome1);
      assertNotSame(chromosome1, bitChromosome0);
      assertNotSame(chromosome1, chromosome0);
      
      bitChromosome0.setChromosomeSlice(genArray0, 2020);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(2020, bitChromosome0.length());
      assertEquals(4, listArray0.length);
      assertEquals(0, genArray0.length);
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertFalse(bitChromosome0.equals((Object)chromosome1));
      assertFalse(genArray0.equals((Object)genArray1));
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(bitChromosome0, chromosome1);
      assertNotSame(genArray0, genArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      List[] listArray0 = new List[1];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A_&e&'3'p%0rtMY";
      stringArray0[1] = "";
      List list0 = new List(stringArray0);
      assertNotNull(list0);
      assertEquals(2, stringArray0.length);
      
      listArray0[0] = list0;
      ListVector listVector0 = new ListVector(listArray0);
      assertNotNull(listVector0);
      assertEquals(1, listArray0.length);
      
      BitChromosome bitChromosome0 = new BitChromosome(1116, listVector0);
      assertEquals(1116, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(bitChromosome0);
      assertEquals(1, listArray0.length);
      
      BitChromosome bitChromosome1 = new BitChromosome(bitChromosome0);
      assertEquals(1116, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertEquals(1116, bitChromosome1.length());
      assertNotNull(bitChromosome1);
      assertEquals(1, listArray0.length);
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      
      // Undeclared exception!
      try { 
        bitChromosome1.getChromosomeSlice((-1455), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(1, (GeneticType) null);
      assertEquals(1, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(bitChromosome0);
      
      RangeGen rangeGen0 = new RangeGen(868, (GeneticType) null);
      assertEquals("868", rangeGen0.getValue());
      assertNotNull(rangeGen0);
      
      String string0 = rangeGen0.toString();
      assertEquals("868", rangeGen0.getValue());
      assertNotNull(string0);
      assertEquals("868", string0);
      
      // Undeclared exception!
      try { 
        bitChromosome0.setGen(rangeGen0, 889);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BitVector bitVector0 = new BitVector(823);
      assertNotNull(bitVector0);
      
      BitChromosome bitChromosome0 = new BitChromosome(823, bitVector0);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(823, bitChromosome0.length());
      assertNotNull(bitChromosome0);
      
      Iterator<Gen> iterator0 = bitChromosome0.iterator();
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(823, bitChromosome0.length());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1);
      assertNotNull(bitVector0);
      
      BitChromosome bitChromosome0 = new BitChromosome(1, bitVector0);
      assertEquals(1, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(bitChromosome0);
      
      BitChromosome bitChromosome1 = new BitChromosome(bitChromosome0);
      assertEquals(1, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertEquals(1, bitChromosome1.length());
      assertNotNull(bitChromosome1);
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      
      Gen[] genArray0 = new Gen[8];
      ListGen listGen0 = new ListGen("vU@YSyca5{Qha-HKzq|", bitVector0);
      assertEquals("vU@YSyca5{Qha-HKzq|", listGen0.getValue());
      assertNotNull(listGen0);
      
      genArray0[0] = (Gen) listGen0;
      BitGen bitGen0 = new BitGen(true, bitVector0);
      assertEquals("1", bitGen0.toString());
      assertEquals("true", bitGen0.getValue());
      assertNotNull(bitGen0);
      
      genArray0[1] = (Gen) bitGen0;
      List[] listArray0 = new List[2];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "vU@YSyca5{Qha-HKzq|";
      stringArray0[1] = "vU@YSyca5{Qha-HKzq|";
      List list0 = new List(stringArray0);
      assertNotNull(list0);
      assertEquals(2, stringArray0.length);
      
      listArray0[0] = list0;
      List list1 = new List(stringArray0);
      assertNotNull(list1);
      assertEquals(2, stringArray0.length);
      assertFalse(list1.equals((Object)list0));
      
      listArray0[1] = list1;
      ListVector listVector0 = new ListVector(listArray0);
      assertNotNull(listVector0);
      assertEquals(2, listArray0.length);
      
      Gen gen0 = listVector0.generateGen(1);
      assertEquals("vU@YSyca5{Qha-HKzq|", gen0.getValue());
      assertNotNull(gen0);
      assertEquals(2, listArray0.length);
      assertFalse(gen0.equals((Object)listGen0));
      assertNotSame(gen0, listGen0);
      
      genArray0[2] = gen0;
      // Undeclared exception!
      try { 
        bitChromosome0.getGen(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      List[] listArray0 = new List[9];
      List list0 = new List((String[]) null);
      assertNotNull(list0);
      
      listArray0[0] = list0;
      List list1 = new List((String[]) null);
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      
      listArray0[1] = list1;
      List list2 = new List((String[]) null);
      assertNotNull(list2);
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      
      listArray0[2] = list2;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BitChromosome must have a longitude greater than 0.";
      stringArray0[1] = "R%/:Zvm";
      stringArray0[2] = "es.unileon.rnag.cubiga.chromosome.BitChromosome";
      stringArray0[3] = "m";
      stringArray0[4] = "es.unileon.rnag.cubiga.chromosome.BitChromosome";
      List list3 = new List(stringArray0);
      assertNotNull(list3);
      assertEquals(5, stringArray0.length);
      assertFalse(list3.equals((Object)list0));
      assertFalse(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list2));
      
      listArray0[3] = list3;
      List list4 = new List(stringArray0);
      assertNotNull(list4);
      assertEquals(5, stringArray0.length);
      assertFalse(list4.equals((Object)list0));
      assertFalse(list4.equals((Object)list3));
      assertFalse(list4.equals((Object)list2));
      assertFalse(list4.equals((Object)list1));
      
      listArray0[4] = list4;
      List list5 = new List((String[]) null);
      assertNotNull(list5);
      assertFalse(list5.equals((Object)list4));
      assertFalse(list5.equals((Object)list0));
      assertFalse(list5.equals((Object)list1));
      assertFalse(list5.equals((Object)list3));
      assertFalse(list5.equals((Object)list2));
      
      listArray0[5] = list5;
      List list6 = new List(stringArray0);
      assertNotNull(list6);
      assertEquals(5, stringArray0.length);
      assertFalse(list6.equals((Object)list0));
      assertFalse(list6.equals((Object)list2));
      assertFalse(list6.equals((Object)list3));
      assertFalse(list6.equals((Object)list5));
      assertFalse(list6.equals((Object)list1));
      assertFalse(list6.equals((Object)list4));
      
      listArray0[6] = list6;
      List list7 = new List(stringArray0);
      assertNotNull(list7);
      assertEquals(5, stringArray0.length);
      assertFalse(list7.equals((Object)list6));
      assertFalse(list7.equals((Object)list2));
      assertFalse(list7.equals((Object)list1));
      assertFalse(list7.equals((Object)list0));
      assertFalse(list7.equals((Object)list3));
      assertFalse(list7.equals((Object)list5));
      assertFalse(list7.equals((Object)list4));
      
      listArray0[7] = list7;
      List list8 = new List((String[]) null);
      assertNotNull(list8);
      assertFalse(list8.equals((Object)list2));
      assertFalse(list8.equals((Object)list5));
      assertFalse(list8.equals((Object)list3));
      assertFalse(list8.equals((Object)list6));
      assertFalse(list8.equals((Object)list4));
      assertFalse(list8.equals((Object)list7));
      assertFalse(list8.equals((Object)list1));
      assertFalse(list8.equals((Object)list0));
      
      listArray0[8] = list8;
      ListVector listVector0 = new ListVector(listArray0);
      assertNotNull(listVector0);
      assertEquals(9, listArray0.length);
      
      BitChromosome bitChromosome0 = new BitChromosome(2345, listVector0);
      assertEquals(2345, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(bitChromosome0);
      assertEquals(9, listArray0.length);
      
      // Undeclared exception!
      try { 
        bitChromosome0.mutateGen((-2459));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(1202, (GeneticType) null);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(1202, bitChromosome0.length());
      assertNotNull(bitChromosome0);
      
      int int0 = bitChromosome0.length();
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(1202, bitChromosome0.length());
      assertEquals(1202, int0);
      
      Chromosome chromosome0 = bitChromosome0.copyChromosome();
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(1202, bitChromosome0.length());
      assertEquals(0.0, chromosome0.getFitness(), 0.01);
      assertEquals(1202, chromosome0.length());
      assertNotNull(chromosome0);
      assertFalse(chromosome0.equals((Object)bitChromosome0));
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(chromosome0, bitChromosome0);
      
      Chromosome chromosome1 = bitChromosome0.copyChromosome();
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(1202, bitChromosome0.length());
      assertEquals(0.0, chromosome1.getFitness(), 0.01);
      assertEquals(1202, chromosome1.length());
      assertNotNull(chromosome1);
      assertFalse(bitChromosome0.equals((Object)chromosome0));
      assertFalse(chromosome1.equals((Object)bitChromosome0));
      assertFalse(chromosome1.equals((Object)chromosome0));
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(bitChromosome0, chromosome1);
      assertNotSame(chromosome1, bitChromosome0);
      assertNotSame(chromosome1, chromosome0);
      
      // Undeclared exception!
      try { 
        bitChromosome0.getChromosomeSlice(1202, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Index to be retrieved for this chromosome is out of bounds
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      BitVector bitVector0 = new BitVector(149);
      assertNotNull(bitVector0);
      
      BitChromosome bitChromosome0 = null;
      try {
        bitChromosome0 = new BitChromosome(0, bitVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BitChromosome must have a longitude greater than 0.
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(837, (GeneticType) null);
      assertEquals(837, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(bitChromosome0);
      
      Gen gen0 = bitChromosome0.getGen(1);
      assertEquals(837, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals("0", gen0.toString());
      assertEquals("false", gen0.getValue());
      assertNotNull(gen0);
      
      Chromosome chromosome0 = bitChromosome0.copyChromosome();
      assertEquals(837, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(0.0, chromosome0.getFitness(), 0.01);
      assertEquals(837, chromosome0.length());
      assertNotNull(chromosome0);
      assertFalse(chromosome0.equals((Object)bitChromosome0));
      assertNotSame(bitChromosome0, chromosome0);
      assertNotSame(chromosome0, bitChromosome0);
      
      // Undeclared exception!
      try { 
        bitChromosome0.getChromosomeSlice(837, 837);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Index to be retrieved for this chromosome is out of bounds
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(1, (GeneticType) null);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(1, bitChromosome0.length());
      assertNotNull(bitChromosome0);
      
      BitChromosome bitChromosome1 = new BitChromosome(bitChromosome0);
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(1, bitChromosome0.length());
      assertEquals(1, bitChromosome1.length());
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertNotNull(bitChromosome1);
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      
      int int0 = bitChromosome1.length();
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertEquals(1, bitChromosome0.length());
      assertEquals(1, bitChromosome1.length());
      assertEquals(0.0, bitChromosome1.getFitness(), 0.01);
      assertFalse(bitChromosome0.equals((Object)bitChromosome1));
      assertFalse(bitChromosome1.equals((Object)bitChromosome0));
      assertNotSame(bitChromosome0, bitChromosome1);
      assertNotSame(bitChromosome1, bitChromosome0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BitChromosome bitChromosome0 = null;
      try {
        bitChromosome0 = new BitChromosome((BitChromosome) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 1191;
      List[] listArray0 = new List[1];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "es.unileon.rnag.cubiga.datatypes.GeneticType";
      stringArray0[3] = "f#r;FS?a\"DL2P8|L";
      stringArray0[4] = "es.unileon.rnag.cubiga.chromosome.BitChromosome";
      stringArray0[5] = "D>u{Y`@Zlj=KE";
      stringArray0[6] = ",Rj@`rL1>iUT~22<F.";
      stringArray0[7] = "";
      stringArray0[8] = "";
      List list0 = new List(stringArray0);
      assertNotNull(list0);
      assertEquals(9, stringArray0.length);
      
      listArray0[0] = list0;
      ListVector listVector0 = new ListVector(listArray0);
      assertNotNull(listVector0);
      assertEquals(1, listArray0.length);
      
      BitChromosome bitChromosome0 = new BitChromosome(1191, listVector0);
      assertEquals(1191, bitChromosome0.length());
      assertEquals(0.0, bitChromosome0.getFitness(), 0.01);
      assertNotNull(bitChromosome0);
      assertEquals(1, listArray0.length);
      
      int int1 = (-57);
      // Undeclared exception!
      try { 
        bitChromosome0.mutateGen((-57));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 1179;
      int int1 = 1201;
      BitVector bitVector0 = new BitVector(1201);
      BitChromosome bitChromosome0 = new BitChromosome(1179, bitVector0);
      int int2 = 0;
      bitVector0.generateGen(0);
      // Undeclared exception!
      try { 
        bitChromosome0.getGen(1179);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1179
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      List[] listArray0 = new List[4];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "9. mz_>U~E'n[e";
      stringArray0[1] = "kE5<;f2Y+671s^wU";
      stringArray0[2] = "Index to be retrieved for this chromosome is out of bounds";
      stringArray0[3] = "";
      stringArray0[4] = "$qx{=:w";
      stringArray0[5] = "=C@";
      stringArray0[6] = "";
      stringArray0[7] = "Zs+&G)^9L";
      stringArray0[8] = "o";
      List list0 = new List(stringArray0);
      listArray0[0] = list0;
      List list1 = new List(stringArray0);
      listArray0[1] = list1;
      List list2 = new List(stringArray0);
      listArray0[2] = list2;
      List list3 = new List(stringArray0);
      listArray0[3] = list3;
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = new BitChromosome(3119, listVector0);
      ListGen listGen0 = new ListGen("o", listVector0);
      // Undeclared exception!
      try { 
        bitChromosome0.setGen(listGen0, 3119);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3119
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BitVector bitVector0 = new BitVector(1432);
      BitChromosome bitChromosome0 = new BitChromosome(1432, bitVector0);
      bitChromosome0.iterator();
      BitChromosome bitChromosome1 = new BitChromosome(bitChromosome0);
      bitChromosome0.getGen(2);
      bitVector0.generateGen(2);
      int int0 = 1531;
      bitChromosome0.copyChromosome();
      bitVector0.generateGen(81);
      int int1 = 0;
      bitVector0.generateGen(0);
      bitVector0.generateChromosome();
      // Undeclared exception!
      try { 
        bitChromosome0.getChromosomeSlice(81, 1531);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Index to be retrieved for this chromosome is out of bounds
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 133;
      Range[] rangeArray0 = new Range[8];
      Range range0 = new Range(0, 0);
      rangeArray0[0] = range0;
      Range range1 = null;
      try {
        range1 = new Range(1495, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The range is not well defined. First index must be lower than last index
         //
         verifyException("es.unileon.rnag.cubiga.datatypes.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 469;
      List[] listArray0 = new List[1];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "!`#eYK";
      List list0 = new List(stringArray0);
      listArray0[0] = list0;
      ListVector listVector0 = new ListVector(listArray0);
      listVector0.generateChromosome();
      listVector0.generateChromosome();
      list0.getRandomPossibility();
      BitChromosome bitChromosome0 = new BitChromosome(469, listVector0);
      int int1 = 0;
      bitChromosome0.mutateGen(0);
      bitChromosome0.getGen(0);
      // Undeclared exception!
      try { 
        bitChromosome0.mutateGen(469);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 469
         //
         verifyException("es.unileon.rnag.cubiga.datatypes.ListVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      List[] listArray0 = new List[3];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "false";
      stringArray0[1] = "ZBN`P8^%`-gDx";
      stringArray0[2] = "A-8gg0qd^VEn";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "myQ.";
      stringArray0[6] = "6l<DEZRD|lCy";
      stringArray0[7] = "";
      stringArray0[8] = "";
      List list0 = new List(stringArray0);
      listArray0[0] = list0;
      List list1 = new List(stringArray0);
      listArray0[1] = list1;
      List list2 = new List(stringArray0);
      listArray0[2] = list2;
      ListVector listVector0 = new ListVector(listArray0);
      BitChromosome bitChromosome0 = null;
      try {
        bitChromosome0 = new BitChromosome(0, listVector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BitChromosome must have a longitude greater than 0.
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BitChromosome bitChromosome0 = new BitChromosome(11, (GeneticType) null);
      Gen[] genArray0 = new Gen[5];
      ListGen listGen0 = new ListGen("The index passed is out of bounds", (GeneticType) null);
      genArray0[0] = (Gen) listGen0;
      // Undeclared exception!
      try { 
        bitChromosome0.getGen((-1354));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 352;
      BitChromosome bitChromosome0 = new BitChromosome(352, (GeneticType) null);
      bitChromosome0.copyChromosome();
      BitChromosome bitChromosome1 = new BitChromosome(bitChromosome0);
      bitChromosome1.iterator();
      bitChromosome1.iterator();
      int int1 = (-1);
      ListGen listGen0 = new ListGen((String) null, (GeneticType) null);
      // Undeclared exception!
      try { 
        bitChromosome0.setGen(listGen0, (-618));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The index passed is out of bounds
         //
         verifyException("es.unileon.rnag.cubiga.chromosome.BitChromosome", e);
      }
  }
}
